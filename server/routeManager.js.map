{"version":3,"sources":["routeManager.ts"],"names":[],"mappings":"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","file":"routeManager.js","sourcesContent":["import * as path from 'path';\r\nimport * as express from 'express';\r\nimport { createProxyMiddleware, responseInterceptor } from 'http-proxy-middleware';\r\n\r\nconst allowedExt = [\r\n  '.js',\r\n  '.ico',\r\n  '.css',\r\n  '.png',\r\n  '.jpg',\r\n  '.woff2',\r\n  '.woff',\r\n  '.ttf',\r\n  '.svg',\r\n  '.eot'\r\n];\r\n\r\nexport class RouteManager {\r\n  private readonly app: any;\r\n  private targetUrl = process.env.NODE_ENV === 'demo' ? 'https://10.101.21.58:8089' : 'https://tomcat-groundx.neom.com:8087';\r\n\r\n  constructor(app: any) {\r\n    this.app = app;\r\n    this.mountRoutes(app);\r\n  }\r\n\r\n  /**\r\n   * Function to mount all the application routes under express application.\r\n   */\r\n  private mountRoutes(app: any): void {\r\n    // Other routes.\r\n    // this.app.use('/api/v1/user', UserController.Instance.Router);\r\n    // this.app.use('/api/v1/device-management', checkApiAuth, DeviceManagementController.Instance.Router);\r\n    // this.app.use('/api/v1/alerts-management', checkApiAuth, AlertsManagementController.Instance.Router);\r\n    // initialiseServices(app);\r\n\r\n    const options = {\r\n      target: this.targetUrl, // target host\r\n      changeOrigin: true, // needed for virtual hosted sites\r\n      ws: true, // proxy websockets\r\n      secure: false, // if you want to verify the certificate\r\n      // pathRewrite: {\r\n      //   '^/api/old-path': '/api/new-path', // rewrite path\r\n      //   '^/api/remove/path': '/path', // remove base path\r\n      // },\r\n      // router: {\r\n      //   // when request.headers.host == 'dev.localhost:3000',\r\n      //   // override target 'http://www.example.org' to 'http://localhost:8000'\r\n      //   // 'dev.localhost:3000': 'http://localhost:8000',\r\n      // },\r\n      // router: {\r\n      //     protocol: 'https:', // The : is required\r\n      //     host: 'localhost',\r\n      //     port: 8080\r\n      // }\r\n      //onProxyRes: responseInterceptor(async (responseBuffer, proxyRes: any, req, res: any) => {\r\n      //   // const response = responseBuffer.toString('utf8'); // convert buffer to string\r\n      //   try {\r\n      //     // console.log('res = ', proxyRes.statusCode);\r\n      //     if (res.statusCode === 401) {\r\n      //       res.statusCode = 302;\r\n      //       proxyRes.headers['location'] = 'https://uatgroundx.neom.com/login';\r\n      //     }\r\n      //     return responseBuffer;\r\n      //   } catch (e) {\r\n      //     console.error('error = ', e);\r\n      //     return responseBuffer;\r\n      //   }\r\n      // })\r\n    };\r\n\r\n    // create the proxy (without context)\r\n    // const exampleProxy = createProxyMiddleware(options);\r\n\r\n    // this.app.use('/nuxeo/', createProxyMiddleware({\r\n    //   target: this.targetUrl,\r\n    //   // ws: true,\r\n    //   secure: false,\r\n    //   changeOrigin: true,\r\n    //   // onProxyRes: responseInterceptor(async (responseBuffer, proxyRes: any, req, res: any) => {\r\n    //   //   // const response = responseBuffer.toString('utf8'); // convert buffer to string\r\n    //   //   try {\r\n    //   //     // console.log('res = ', proxyRes.statusCode);\r\n    //   //     if (res.statusCode === 401) {\r\n    //   //       res.statusCode = 302;\r\n    //   //       proxyRes.headers['location'] = 'https://uatgroundx.neom.com/login';\r\n    //   //     }\r\n    //   //     return responseBuffer;\r\n    //   //   } catch (e) {\r\n    //   //     console.error('error = ', e);\r\n    //   //     return responseBuffer;\r\n    //   //   }\r\n    //   // })\r\n    // }));\r\n    this.app.use('/nuxeo/', createProxyMiddleware(\r\n      {\r\n        //   router: {\r\n        //     '/' : 'http://localhost:8001'\r\n        // },\r\n        // router: function () {\r\n        //   return {\r\n        //     protocol: 'https:', // The : is required\r\n        //     host: 'tomcat-groundx.neom.com',\r\n        //     port: 8087\r\n        //   }\r\n        // },\r\n        target: this.targetUrl, \r\n        changeOrigin: true,\r\n        secure: false,\r\n        logLevel: 'debug',\r\n\r\n      }\r\n    ));\r\n\r\n    // Default route.\r\n    this.app.use(express.static(path.resolve(__dirname + '/../../' + '/dist')));\r\n    this.app.get('*', (req: express.Request, res: express.Response) => {\r\n      if (allowedExt.filter(ext => req.url.includes(ext)).length > 0) {\r\n        res.sendFile(path.resolve(__dirname + '/../../' + '/dist/' + req.url));\r\n      } else {\r\n        res.sendFile(path.resolve(__dirname + '/../../' + '/dist/index.html'));\r\n      }\r\n    });\r\n\r\n    // function checkApiAuth(req: express.Request | any, res: express.Response, next: express.NextFunction) {\r\n    //   const token: string = req.headers['access-token'];\r\n    //   if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });\r\n\r\n    //   const secret = process.env.SECRET;\r\n    //   jwt.verify(token, secret, function (err, decoded) {\r\n    //     if (err) return res.status(402).send({ auth: false, message: 'Failed to authenticate token.' });\r\n\r\n    //     next();\r\n    //   });\r\n    // }\r\n\r\n  }\r\n}\r\n"]}
{"version":3,"sources":["routeManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA6B;AAC7B,+CAAmC;AAEnC,IAAM,UAAU,GAAG;IACjB,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,QAAQ;IACR,OAAO;IACP,MAAM;IACN,MAAM;IACN,MAAM;CACP,CAAC;AAEF;IAGE,sBAAY,GAAQ;QAClB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,kCAAW,GAAnB,UAAoB,GAAQ;QAC1B,gBAAgB;QAChB,gEAAgE;QAChE,uGAAuG;QACvG,uGAAuG;QACvG,2BAA2B;QAE3B,iBAAiB;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAoB,EAAE,GAAqB;YAC5D,IAAI,UAAU,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9D,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,GAAG,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACxE;iBAAM;gBACL,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,GAAG,kBAAkB,CAAC,CAAC,CAAC;aACxE;QACH,CAAC,CAAC,CAAC;QAEH,yGAAyG;QACzG,uDAAuD;QACvD,6FAA6F;QAE7F,uCAAuC;QACvC,wDAAwD;QACxD,uGAAuG;QAEvG,cAAc;QACd,QAAQ;QACR,IAAI;IAEN,CAAC;IACH,mBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,oCAAY","file":"../routeManager.js","sourcesContent":["import * as path from 'path';\nimport * as express from 'express';\n\nconst allowedExt = [\n  '.js',\n  '.ico',\n  '.css',\n  '.png',\n  '.jpg',\n  '.woff2',\n  '.woff',\n  '.ttf',\n  '.svg',\n  '.eot'\n];\n\nexport class RouteManager {\n  private readonly app: any;\n\n  constructor(app: any) {\n    this.app = app;\n    this.mountRoutes(app);\n  }\n\n  /**\n   * Function to mount all the application routes under express application.\n   */\n  private mountRoutes(app: any): void {\n    // Other routes.\n    // this.app.use('/api/v1/user', UserController.Instance.Router);\n    // this.app.use('/api/v1/device-management', checkApiAuth, DeviceManagementController.Instance.Router);\n    // this.app.use('/api/v1/alerts-management', checkApiAuth, AlertsManagementController.Instance.Router);\n    // initialiseServices(app);\n\n    // Default route.\n    this.app.use(express.static(path.resolve(__dirname + '/../../' + '/dist')));\n    this.app.get('*', (req: express.Request, res: express.Response) => {\n      if (allowedExt.filter(ext => req.url.includes(ext)).length > 0) {\n        res.sendFile(path.resolve(__dirname + '/../../' + '/dist/' + req.url));\n      } else {\n        res.sendFile(path.resolve(__dirname + '/../../' + '/dist/index.html'));\n      }\n    });\n\n    // function checkApiAuth(req: express.Request | any, res: express.Response, next: express.NextFunction) {\n    //   const token: string = req.headers['access-token'];\n    //   if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    //   const secret = process.env.SECRET;\n    //   jwt.verify(token, secret, function (err, decoded) {\n    //     if (err) return res.status(402).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    //     next();\n    //   });\n    // }\n\n  }\n}\n"]}